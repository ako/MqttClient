// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testmqttclient.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;

public class Microflows
{
	// These are the microflows for the TestMqttClient module
	public static void onMessageTestSubscribe(IContext context, java.lang.String _payload, java.lang.String _topic)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Payload", _payload);
		params.put("Topic", _topic);
		Core.microflowCall("TestMqttClient.OnMessageTestSubscribe").withParams(params).execute(context);
	}
	public static void onTopic1ImportMessage(IContext context, java.lang.String _payload, java.lang.String _topic)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Payload", _payload);
		params.put("Topic", _topic);
		Core.microflowCall("TestMqttClient.OnTopic1ImportMessage").withParams(params).execute(context);
	}
	public static void onTopic1Message(IContext context, java.lang.String _payload, java.lang.String _topic)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Payload", _payload);
		params.put("Topic", _topic);
		Core.microflowCall("TestMqttClient.OnTopic1Message").withParams(params).execute(context);
	}
	public static void onTopic2ImportMessage(IContext context, java.lang.String _payload, java.lang.String _topic)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Payload", _payload);
		params.put("Topic", _topic);
		Core.microflowCall("TestMqttClient.OnTopic2ImportMessage").withParams(params).execute(context);
	}
	public static void onTopic2Message(IContext context, java.lang.String _payload, java.lang.String _topic)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Payload", _payload);
		params.put("Topic", _topic);
		Core.microflowCall("TestMqttClient.OnTopic2Message").withParams(params).execute(context);
	}
	public static boolean test_AwsIotSubscribe(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_AwsIotSubscribe").withParams(params).execute(context);
	}
	public static boolean test_IBMPublish(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_IBMPublish").withParams(params).execute(context);
	}
	public static boolean test_IBMSubscribe(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_IBMSubscribe").withParams(params).execute(context);
	}
	public static boolean test_SubscribeMosquittoTopics_BBCSubtitles(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_SubscribeMosquittoTopics_BBCSubtitles").withParams(params).execute(context);
	}
	public static boolean test_SubscribeTwoMosquittoImportTopics(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_SubscribeTwoMosquittoImportTopics").withParams(params).execute(context);
	}
	public static boolean test_ThinkSpeakPublish(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_ThinkSpeakPublish").withParams(params).execute(context);
	}
	public static boolean test_ThinkSpeakSubscribe(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_ThinkSpeakSubscribe").withParams(params).execute(context);
	}
	public static boolean test_TTNSubscribe(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestMqttClient.Test_TTNSubscribe").withParams(params).execute(context);
	}
}